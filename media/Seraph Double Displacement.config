<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<Printer name ="Fab@Home Model 3" formatVersion="1.0">
  <motion>
    <acceleration units="mm/s/s">100</acceleration>
    <!--Unit of distance is mm for all values.-->
    <axis>
      <name>X</name>
      <actuatorID>0</actuatorID>
      <!--The ID of the motor that controls this bay or blank if no motor controls this bay.-->
      <revolutionsPerDistance unit ="mm">0.028148728</revolutionsPerDistance>
      <!-- The revolutions per distance unit of the axis-->
      <!-- 0.0276791205,0.0331572798 ,0.0331572798 -->
      <range units ="mm">230</range>
    </axis>
    <axis>
      <name>Y</name>
      <actuatorID>1</actuatorID>
      <revolutionsPerDistance unit ="mm">0.027881509</revolutionsPerDistance>
      <range units ="mm">200</range>
    </axis>
    <axis>
      <name>Z</name>
      <actuatorID>2</actuatorID>
      <revolutionsPerDistance unit ="mm">0.0331572798</revolutionsPerDistance>
      <range units ="mm">180</range>
    </axis>
  </motion>

  <tool name="Displacement Extruder">
    <bay>
      <id>0</id>
      <!-- use ID # rather than string-->
      <volume units="mm^3">10</volume>
      <!--maximum volume of the tool, 0 = infinite-->
      <flow>continuous</flow>
      <!-- either either contiuous or binary-->
      <actuation>
        <method>displacement</method>
        <!-- either displacement or descrete-->
        <revolutionsPerVolume unit="mm^3">0.01</revolutionsPerVolume>
        <!-- Use this to find mm^3/distance-->
        <actuatorID>E</actuatorID>
        <!--The ID of the motor that controls this bay or blank if no motor controls this bay.-->
        <script type="text/javascript">
          <![CDATA[
                function onStartVoxel(){
                    var cmds = [];
                    return cmds
                }

                function onEndVoxel(){
                    var cmds = [];
                    return cmds
                }


                function onVoxel(voxel){
                    var cmds = [];
                    var time = voxel.volume / material.Q*1000.0;
                    var suckbackQ = 1000*60;
                    var amount = material.compressionVolume*revolutionsPerVolume;
                    var cmd1 = "G1 X"+voxel.x+" Y"+voxel.y+" Z"+voxel.z+" F"+material.pathspeed;
                    var cmd2 = "G1 "+actuatorIDs[0]+amount + " F"+suckbackQ;
                    var cmd3 = "G4 P"+time;
                    amount = - amount;
                    var cmd4 = "G1 "+actuatorIDs[0]+amount+ " F"+suckbackQ;
                    cmds[0] = cmd1;
                    cmds[1] = cmd2;
                    cmds[2] = cmd3;
                    cmds[3] = cmd4;
                    return cmds
                }
                function onStartPath(){
                    var cmds = [];
                    var suckbackQ = 1000*60;
                    var amount = material.compressionVolume*revolutionsPerVolume;
                    var cmd2 = "G1 "+actuatorIDs[0]+amount + " F"+suckbackQ;
                    cmds[0]=cmd2;
                    return cmds;
                }
                function onEndPath(){
                    var cmds = [];
                    var suckbackQ = 1000*60;
                    var amount = -material.compressionVolume*revolutionsPerVolume;
                    var cmd2 = "G1 "+actuatorIDs[0]+amount  + " F"+suckbackQ;
                    cmds[0]=cmd2;
                    return cmds;
                }

                function onPath(path){
                    var speed = material.pathspeed*60;
                    var cmds = [];
                    function delta(p1,p2){
                        return Math.sqrt(Math.pow(p1.x-p2.x)+Math.pow(p1.y-p2.y)+Math.pow(p1.z-p2.z));
                    }
                    var i=0;
                    var lastPoint = path.points[0];
                    for (i=1; i<path.points.length; i++){
                        var point = path.points[i]
                        var d = delta(lastpoint,point)
                        var e = d/speed*revolutionsPerVolume;
                        var cmd = "G1 X"+point.x+" Y"+point.y+" Z"+point.z" "+actuatorIDs[0]+e+" F"+speed;
                        cmds[cmds.length]=cmd;
                    }

                    return cmds;
                }
          ]]>
        </script>
      </actuation>

      <location>
        <x>0</x>
        <y>0</y>
        <z>0</z>
      </location>
    </bay>
	<bay>
      <id>1</id>
      <!-- use ID # rather than string-->
      <volume units="mm^3">10</volume>
      <!--maximum volume of the tool, 0 = infinite-->
      <flow>continuous</flow>
      <!-- either either contiuous or binary-->
      <actuation>
        <method>displacement</method>
        <!-- either displacement or descrete-->
        <revolutionsPerVolume unit="mm^3">0.01</revolutionsPerVolume>
        <!-- Use this to find mm^3/distance-->
        <actuatorID>E</actuatorID>
        <!--The ID of the motor that controls this bay or blank if no motor controls this bay.-->
        <script type="text/javascript">
          <![CDATA[
                function onStartVoxel(){
                    var cmds = [];
                    return cmds
                }

                function onEndVoxel(){
                    var cmds = [];
                    return cmds
                }


                function onVoxel(voxel){
                    var cmds = [];
                    var time = voxel.volume / material.Q*1000.0;
                    var suckbackQ = 1000*60;
                    var amount = material.compressionVolume*revolutionsPerVolume;
                    var cmd1 = "G1 X"+voxel.x+" Y"+voxel.y+" Z"+voxel.z+" F"+material.pathspeed;
                    var cmd2 = "G1 "+actuatorIDs[0]+amount + " F"+suckbackQ;
                    var cmd3 = "G4 P"+time;
                    amount = - amount;
                    var cmd4 = "G1 "+actuatorIDs[0]+amount+ " F"+suckbackQ;
                    cmds[0] = cmd1;
                    cmds[1] = cmd2;
                    cmds[2] = cmd3;
                    cmds[3] = cmd4;
                    return cmds
                }
                function onStartPath(){
                    var cmds = [];
                    var suckbackQ = 1000*60;
                    var amount = material.compressionVolume*revolutionsPerVolume;
                    var cmd2 = "G1 "+actuatorIDs[0]+amount + " F"+suckbackQ;
                    cmds[0]=cmd2;
                    return cmds;
                }
                function onEndPath(){
                    var cmds = [];
                    var suckbackQ = 1000*60;
                    var amount = -material.compressionVolume*revolutionsPerVolume;
                    var cmd2 = "G1 "+actuatorIDs[0]+amount  + " F"+suckbackQ;
                    cmds[0]=cmd2;
                    return cmds;
                }

                function onPath(path){
                    var speed = material.pathspeed*60;
                    var cmds = [];
                    function delta(p1,p2){
                        return Math.sqrt(Math.pow(p1.x-p2.x)+Math.pow(p1.y-p2.y)+Math.pow(p1.z-p2.z));
                    }
                    var i=0;
                    var lastPoint = path.points[0];
                    for (i=1; i<path.points.length; i++){
                        var point = path.points[i]
                        var d = delta(lastpoint,point)
                        var e = d/speed*revolutionsPerVolume;
                        var cmd = "G1 X"+point.x+" Y"+point.y+" Z"+point.z" "+actuatorIDs[0]+e+" F"+speed;
                        cmds[cmds.length]=cmd;
                    }

                    return cmds;
                }
          ]]>
        </script>
      </actuation>

      <location>
        <x>0</x>
        <y>33</y>
        <z>0</z>
      </location>
    </bay>
  </tool>
  
  
  
  
  <system>
    <warmUp></warmUp>
    <!--this should be the script of either XDFL or GCODE run at first conneciton-->
    <coolDown>
      <!--this should be the script of either XDFL or GCODE run at the end of a print-->
      <script type="XDFL">
        <![CDATA[<path coordinates="rel"><point><x>0</x><y>0</y><z>-20</z></point></path>]]>
      </script>
    </coolDown>
  </system>

  <electronics type="JrKerr Snap Motors">
    <controller>
      <comPort>6</comPort>
      <numModules>4</numModules>
      <buffSize>80</buffSize>
      <baudRate>19200</baudRate>
      <bufferRate unit="hz">30</bufferRate>
      <xyzGroupAddress>128</xyzGroupAddress>
    </controller>
    <actuator>
      <id>0</id>
      <type>DC/Encoder</type>
      <!--Address of the motor.-->
      <address>1</address>
      <!--Direction of the motor. if zero the motor is positive clockwise. if !=0 the motor is positive counter-clockwise-->
      <reverse>0</reverse>
      <!--Counts to move one unit of distance.-->
      <countsPerRevolution>8385.577</countsPerRevolution>
      <!--Kp value of motor gains.-->
      <kp>2200</kp>
      <!--Kd value of motor gains.-->
      <kd>30000</kd>
      <!--Ki value of motor gains.-->
      <ki>0</ki>
      <!--IL value of motor gains.-->
      <il>16000</il>
      <!--OL value of motor gains.-->
      <ol>255</ol>
      <!--CL value of motor gains.-->
      <cl>0</cl>
      <!--EL value of motor gains.-->
      <el>32767</el>
      <!--SR value of motor gains.-->
      <sr>1</sr>
      <!--DB value of motor gains.-->
      <db>0</db>
      <!--Ticks per second.-->
      <ticksPerSecond>1953.125</ticksPerSecond>
      <!-- What does this mean???-->
      <minCommandedPosition>-2147483648.0</minCommandedPosition>
      <maxCommandedPosition>2147483647.0</maxCommandedPosition>
      <minCommandedVelocity>0.0</minCommandedVelocity>
      <maxCommandedVelocity>2500000.0</maxCommandedVelocity>
      <minCommandedAcceleration>0.0</minCommandedAcceleration>
      <maxCommandedAcceleration>125000000000.0</maxCommandedAcceleration>
    </actuator>
    <actuator>
      <id>1</id>
      <!--Address of the motor.-->
      <address>2</address>
      <!--Direction of the motor. if zero the motor is positive clockwise. if !=0 the motor is positive counter-clockwise-->
      <reverse>1</reverse>
      <type>DC/Encoder</type>
      <!--Counts to move one unit of distance.-->
      <countsPerRevolution>8385.577</countsPerRevolution>
      <!--Kp value of motor gains.-->
      <kp>1200</kp>
      <!--Kd value of motor gains.-->
      <kd>23000</kd>
      <!--Ki value of motor gains.-->
      <ki>0</ki>
      <!--IL value of motor gains.-->
      <il>16000</il>
      <!--OL value of motor gains.-->
      <ol>255</ol>
      <!--CL value of motor gains.-->
      <cl>0</cl>
      <!--EL value of motor gains.-->
      <el>32767</el>
      <!--SR value of motor gains.-->
      <sr>1</sr>
      <!--DB value of motor gains.-->
      <db>0</db>
      <!--Ticks per second.-->
      <ticksPerSecond>1953.125</ticksPerSecond>
      <minCommandedPosition>-2147483648.0</minCommandedPosition>
      <maxCommandedPosition>2147483647.0</maxCommandedPosition>
      <minCommandedVelocity>0.0</minCommandedVelocity>
      <maxCommandedVelocity>2500000.0</maxCommandedVelocity>
      <minCommandedAcceleration>0.0</minCommandedAcceleration>
      <maxCommandedAcceleration>125000000000.0</maxCommandedAcceleration>
    </actuator>
    <actuator>
      <id>2</id>
      <!--Address of the motor.-->
      <address>3</address>
      <type>DC/Encoder</type>
      <!--Direction of the motor. if zero the motor is positive clockwise. if !=0 the motor is positive counter-clockwise-->
      <reverse>1</reverse>
      <!--Counts to move one unit of distance.-->
      <countsPerRevolution>8385.577</countsPerRevolution>
      <!--Kp value of motor gains.-->
      <kp>1000</kp>
      <!--Kd value of motor gains.-->
      <kd>20000</kd>
      <!--Ki value of motor gains.-->
      <ki>0</ki>
      <!--IL value of motor gains.-->
      <il>16000</il>
      <!--OL value of motor gains.-->
      <ol>255</ol>
      <!--CL value of motor gains.-->
      <cl>0</cl>
      <!--EL value of motor gains.-->
      <el>32767</el>
      <!--SR value of motor gains.-->
      <sr>1</sr>
      <!--DB value of motor gains.-->
      <db>0</db>
      <!--Ticks per second.-->
      <ticksPerSecond>1953.125</ticksPerSecond>
      <minCommandedPosition>-2147483648.0</minCommandedPosition>
      <maxCommandedPosition>2147483647.0</maxCommandedPosition>
      <minCommandedVelocity>0.0</minCommandedVelocity>
      <maxCommandedVelocity>2500000.0</maxCommandedVelocity>
      <minCommandedAcceleration>0.0</minCommandedAcceleration>
      <maxCommandedAcceleration>125000000000.0</maxCommandedAcceleration>
    </actuator>
    <actuator>
      <id>3</id>
      <type>DC/Encoder</type>
      <!--Address of the motor.-->
      <address>4</address>
      <!--Direction of the motor. if zero the motor is positive clockwise. if !=0 the motor is positive counter-clockwise-->
      <reverse>1</reverse>
      <!--Counts to move one unit of distance.-->
      <countsPerRevolution>8385.577</countsPerRevolution>
      <!--Kp value of motor gains.-->
      <kp>2200</kp>
      <!--Kd value of motor gains.-->
      <kd>30000</kd>
      <!--Ki value of motor gains.-->
      <ki>0</ki>
      <!--IL value of motor gains.-->
      <il>16000</il>
      <!--OL value of motor gains.-->
      <ol>255</ol>
      <!--CL value of motor gains.-->
      <cl>0</cl>
      <!--EL value of motor gains.-->
      <el>32767</el>
      <!--SR value of motor gains.-->
      <sr>1</sr>
      <!--DB value of motor gains.-->
      <db>0</db>
      <!--Ticks per second.-->
      <ticksPerSecond>1953.125</ticksPerSecond>
      <!-- What does this mean???-->
      <minCommandedPosition>-2147483648.0</minCommandedPosition>
      <maxCommandedPosition>2147483647.0</maxCommandedPosition>
      <minCommandedVelocity>0.0</minCommandedVelocity>
      <maxCommandedVelocity>2500000.0</maxCommandedVelocity>
      <minCommandedAcceleration>0.0</minCommandedAcceleration>
      <maxCommandedAcceleration>125000000000.0</maxCommandedAcceleration>
    </actuator>
	<actuator>
      <id>4</id>
      <type>DC/Encoder</type>
      <!--Address of the motor.-->
      <address>4</address>
      <!--Direction of the motor. if zero the motor is positive clockwise. if !=0 the motor is positive counter-clockwise-->
      <reverse>1</reverse>
      <!--Counts to move one unit of distance.-->
      <countsPerRevolution>8385.577</countsPerRevolution>
      <!--Kp value of motor gains.-->
      <kp>2200</kp>
      <!--Kd value of motor gains.-->
      <kd>30000</kd>
      <!--Ki value of motor gains.-->
      <ki>0</ki>
      <!--IL value of motor gains.-->
      <il>16000</il>
      <!--OL value of motor gains.-->
      <ol>255</ol>
      <!--CL value of motor gains.-->
      <cl>0</cl>
      <!--EL value of motor gains.-->
      <el>32767</el>
      <!--SR value of motor gains.-->
      <sr>1</sr>
      <!--DB value of motor gains.-->
      <db>0</db>
      <!--Ticks per second.-->
      <ticksPerSecond>1953.125</ticksPerSecond>
      <!-- What does this mean???-->
      <minCommandedPosition>-2147483648.0</minCommandedPosition>
      <maxCommandedPosition>2147483647.0</maxCommandedPosition>
      <minCommandedVelocity>0.0</minCommandedVelocity>
      <maxCommandedVelocity>2500000.0</maxCommandedVelocity>
      <minCommandedAcceleration>0.0</minCommandedAcceleration>
      <maxCommandedAcceleration>125000000000.0</maxCommandedAcceleration>
    </actuator>
  </electronics>
</Printer>
