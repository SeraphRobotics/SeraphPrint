<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<Printer name ="Seraph Scientist" formatVersion="1.0">
  <motion>
    <acceleration units="mm/s/s">100</acceleration>
    <!--Unit of distance is mm for all values.-->
    <axis>
      <name>X</name>
      <actuatorID>0</actuatorID>
      <!--The ID of the motor that controls this bay or blank if no motor controls this bay.-->
      <revolutionsPerDistance unit ="mm">0.028148728</revolutionsPerDistance>
      <!-- The revolutions per distance unit of the axis-->
      <!-- 0.0276791205,0.0331572798 ,0.0331572798 -->
      <range units ="mm">230</range>
    </axis>
    <axis>
      <name>Y</name>
      <actuatorID>1</actuatorID>
      <revolutionsPerDistance unit ="mm">0.027881509</revolutionsPerDistance>
      <range units ="mm">200</range>
    </axis>
    <axis>
      <name>Z</name>
      <actuatorID>2</actuatorID>
      <revolutionsPerDistance unit ="mm">0.0331572798</revolutionsPerDistance>
      <range units ="mm">180</range>
    </axis>
  </motion>

  <tool name="Triple Valve Extruder">
    <bay>
      <id>0</id>
      <!-- use ID # rather than string-->
      <volume units="mm^3">55</volume>
      <!--maximum volume of the tool, 0 = infinite-->
      <flow>continuous</flow>
      <!-- either either contiuous or binary-->
      <actuation>
        <method>discrete</method>
        <!-- either displacement or descrete-->
        <revolutionsPerVolume unit="mm^3">0.01</revolutionsPerVolume>
        <!-- Use this to find mm^3/distance-->
        <actuatorID>0</actuatorID>
        <!--The ID of the motor that controls this bay or blank if no motor controls this bay.-->
        <script type="text/javascript">
          <![CDATA[
				function onJog(amount){
					var cmds = new Array();
					var cmd1 = "G4 P2"
					var cmd2;
					if (amount > 0){
						cmd2 = "M340 P"+actuatorIDs[0]+" S1000"
					}else{
						cmd2 = "M340 P"+actuatorIDs[0]+" S500"
					}
					cmds[0]=cmd1;
					cmds[1]=cmd2;
					return cmds;
				}

		  		function onLoadMaterial(){
					var cmds = new Array();
					//try{
					//	var temp = material.temperature
					//	cmds[0] = "M109 S"+temp+" T"+bayid;
					//	cmds[1] = "M106 S128";
					//}catch(err){
					//	print(err);
					//}
					return cmds;
				}
		  
				function onConnect(){
					var cmds = new Array();
					cmds[0] = "M82"; //use absolute distances for extrusion
					//cmds[1] = "M109 S200 T"+bayid;//wait for temperature to be reached
					cmds[1] = "T"+bayid;
					cmds[2] = "G92 E0"
					return cmds;
				}
				function onShutdown(){
					var cmds = new Array();
					cmds[0] = "M104 S0 T"+bayid; //use absolute distances for extrusion
					cmds[1] = "M107";
					return cmds;				
				}
		  
		  		function onStartPath(){
					var cmds = new Array();
					var suckbackQ = material.pathspeed*60;
					//var amount = material.compressionVolume*revolutionsPerVolume/1000.0;
					var cmd2 = "G4 P2"
					var cmd3 = "M340 P"+actuatorIDs[0]+" S500"
					cmds[0]=cmd2;
					cmds[1]=cmd3
					return cmds;
				}
				function onEndPath(){
					var cmds = new Array();
					var suckbackQ = material.pathspeed*60;
					//var amount = material.compressionVolume*revolutionsPerVolume/1000.0;
					var cmd2 = "G4 P2"
					var cmd3 = "M340 P"+actuatorIDs[0]+" S1000"
					cmds[0]=cmd2;
					cmds[1]=cmd3
					return cmds;
				}
				function onPath(path){
					var speed = material.pathspeed*60;
					var cmds = new Array();
					
					function delta(p1,p2){
						return Math.sqrt(Math.pow(p1.x-p2.x,2)+Math.pow(p1.y-p2.y,2)+Math.pow(p1.z-p2.z,2));
					}
					var i=0;
					var lastpoint = path.points[0];
					var begin = "G1 X"+lastpoint.x+" Y"+lastpoint.y+" Z"+lastpoint.z+" F"+speed;
					cmds[cmds.length] = begin;
					cmds[cmds.length] = "G4 P2";
					cmds[cmds.length] = "M340 P"+actuatorIDs[0]+" S500";
					cmds[cmds.length] = "G4 P100";
					
					for (i=0; i<path.points.length; i++){
						var point = path.points[i];
						var d = delta(lastpoint,point)/100.0;
						var x = point.x-location[0];
						var y = point.y-location[1];
						var z = point.z-location[2];
						var cmd = "G1 X"+x+" Y"+y+" Z"+z;//+" F"+speed;
						cmds[cmds.length]=cmd;
						lastpoint = point
					}
					cmds[cmds.length] = "G4 P2";
					cmds[cmds.length] = "M340 P"+actuatorIDs[0]+" S1000";
					cmds[cmds.length] = "G4 P100";
					
					return cmds;
				}
				
          ]]>
        </script>
      </actuation>

      <location>
        <x>0</x>
        <y>0</y>
        <z>0</z>
      </location>
    </bay>
	<bay>
      <id>1</id>
      <!-- use ID # rather than string-->
      <volume units="mm^3">55</volume>
      <!--maximum volume of the tool, 0 = infinite-->
      <flow>continuous</flow>
      <!-- either either contiuous or binary-->
      <actuation>
        <method>discrete</method>
        <!-- either displacement or discrete-->
        <revolutionsPerVolume unit="mm^3">0.01</revolutionsPerVolume>
        <!-- Use this to find mm^3/distance-->
        <actuatorID>1</actuatorID>
        <!--The ID of the motor that controls this bay or blank if no motor controls this bay.-->
        <script type="text/javascript">
          <![CDATA[
		  		function onJog(amount){
					var cmds = new Array();
					var cmd1 = "G4 P2"
					var cmd2;
					if (amount > 0){
						cmd2 = "M340 P"+actuatorIDs[0]+" S1300"
					}else{
						cmd2 = "M340 P"+actuatorIDs[0]+" S800"
					}
					cmds[0]=cmd1;
					cmds[1]=cmd2;
					return cmds;
				}
				
		  		function onLoadMaterial(){
					var cmds = new Array();
					//try{
					//	var temp = material.temperature
					//	cmds[0] = "M109 S"+temp+" T"+bayid;
					//	cmds[1] = "M106 S128";
					//}catch(err){
					//	print(err);
					//}
					return cmds;
				}
		  
				function onConnect(){
					var cmds = new Array();
					cmds[0] = "M82"; //use absolute distances for extrusion
					//cmds[1] = "M109 S200 T"+bayid;//wait for temperature to be reached
					cmds[1] = "T"+bayid;
					cmds[2] = "G92 E0"
					return cmds;
				}
				function onShutdown(){
					var cmds = new Array();
					cmds[0] = "M104 S0 T"+bayid; //use absolute distances for extrusion
					cmds[1] = "M107";
					return cmds;				
				}
		  
		  		function onStartPath(){
					var cmds = new Array();
					var suckbackQ = material.pathspeed*60;
					//var amount = material.compressionVolume*revolutionsPerVolume/1000.0;
					var cmd2 = "G4 P2"
					var cmd3 = "M340 P"+actuatorIDs[0]+" S800"
					cmds[0]=cmd2;
					cmds[1]=cmd3
					return cmds;
				}
				function onEndPath(){
					var cmds = new Array();
					var suckbackQ = material.pathspeed*60;
					//var amount = material.compressionVolume*revolutionsPerVolume/1000.0;
					var cmd2 = "G4 P2"
					var cmd3 = "M340 P"+actuatorIDs[0]+" S1300"
					cmds[0]=cmd2;
					cmds[1]=cmd3
					return cmds;
				}
				function onPath(path){
					var speed = material.pathspeed*60;
					var cmds = new Array();
					
					function delta(p1,p2){
						return Math.sqrt(Math.pow(p1.x-p2.x,2)+Math.pow(p1.y-p2.y,2)+Math.pow(p1.z-p2.z,2));
					}
					var i=0;
					var lastpoint = path.points[0];
					var lx = lastpoint.x-60;
					var begin = "G1 X"+lx+" Y"+lastpoint.y+" Z"+lastpoint.z+" F"+speed;
					cmds[cmds.length] = begin;
					cmds[cmds.length] = "G4 P2";
					cmds[cmds.length] = "M340 P"+actuatorIDs[0]+" S800";
					cmds[cmds.length] = "G4 P100";
					
					for (i=0; i<path.points.length; i++){
						var point = path.points[i];
						var d = delta(lastpoint,point)/100.0;
						var x = point.x-location[0];
						var y = point.y-location[1];
						var z = point.z-location[2];
						var cmd = "G1 X"+x+" Y"+y+" Z"+z;//+" F"+speed;
						cmds[cmds.length]=cmd;
						lastpoint = point
					}
					cmds[cmds.length] = "G4 P2";
					cmds[cmds.length] = "M340 P"+actuatorIDs[0]+" S1300";
					cmds[cmds.length] = "G4 P100";

					
					return cmds;
				}
				
          ]]>
        </script>
      </actuation>

      <location>
        <x>60</x>
        <y>0</y>
        <z>0</z>
      </location>
    </bay>
	<bay>
      <id>2</id>
      <!-- use ID # rather than string-->
      <volume units="mm^3">55</volume>
      <!--maximum volume of the tool, 0 = infinite-->
      <flow>continuous</flow>
      <!-- either either contiuous or binary-->
      <actuation>
        <method>discrete</method>
        <!-- either displacement or descrete-->
        <revolutionsPerVolume unit="mm^3">0.01</revolutionsPerVolume>
        <!-- Use this to find mm^3/distance-->
        <actuatorID>2</actuatorID>
        <!--The ID of the motor that controls this bay or blank if no motor controls this bay.-->
        <script type="text/javascript">
          <![CDATA[
		  		function onJog(amount){
					var cmds = new Array();
					var cmd1 = "G4 P2"
					var cmd2;
					if (amount > 0){
						cmd2 = "M340 P"+actuatorIDs[0]+" S1000"
					}else{
						cmd2 = "M340 P"+actuatorIDs[0]+" S500"
					}
					cmds[0]=cmd1;
					cmds[1]=cmd2;
					return cmds;
				}
		  
		  
		  
		  		function onLoadMaterial(){
					var cmds = new Array();
					//try{
					//	var temp = material.temperature
					//	cmds[0] = "M109 S"+temp+" T"+bayid;
					//	cmds[1] = "M106 S128";
					//}catch(err){
					//	print(err);
					//}
					return cmds;
				}
		  
				function onConnect(){
					var cmds = new Array();
					cmds[0] = "M82"; //use absolute distances for extrusion
					//cmds[1] = "M109 S200 T"+bayid;//wait for temperature to be reached
					cmds[1] = "T"+bayid;
					cmds[2] = "G92 E0"
					return cmds;
				}
				function onShutdown(){
					var cmds = new Array();
					cmds[0] = "M104 S0 T"+bayid; //use absolute distances for extrusion
					cmds[1] = "M107";
					return cmds;				
				}
		  
		  		function onStartPath(){
					var cmds = new Array();
					var suckbackQ = material.pathspeed*60;
					//var amount = material.compressionVolume*revolutionsPerVolume/1000.0;
					var cmd2 = "G4 P2"
					var cmd3 = "M340 P"+actuatorIDs[0]+" S500"
					cmds[0]=cmd2;
					cmds[1]=cmd3
					return cmds;
				}
				function onEndPath(){
					var cmds = new Array();
					var suckbackQ = material.pathspeed*60;
					//var amount = material.compressionVolume*revolutionsPerVolume/1000.0;
					var cmd2 = "G4 P2"
					var cmd3 = "M340 P"+actuatorIDs[0]+" S1000"
					cmds[0]=cmd2;
					cmds[1]=cmd3
					return cmds;
				}
				function onPath(path){
					var speed = material.pathspeed*60;
					var cmds = new Array();
					
					function delta(p1,p2){
						return Math.sqrt(Math.pow(p1.x-p2.x,2)+Math.pow(p1.y-p2.y,2)+Math.pow(p1.z-p2.z,2));
					}
					var i=0;
					var lastpoint = path.points[0];
					var lx = lastpoint.x-60;
					var begin = "G1 X"+lx+" Y"+lastpoint.y+" Z"+lastpoint.z+" F"+speed;
					cmds[cmds.length] = begin;
					cmds[cmds.length] = "G4 P2";
					cmds[cmds.length] = "M340 P"+actuatorIDs[0]+" S500";
					
					for (i=0; i<path.points.length; i++){
						var point = path.points[i];
						var d = delta(lastpoint,point)/100.0;
						var x = point.x-location[0];
						var y = point.y-location[1];
						var z = point.z-location[2];
						var cmd = "G1 X"+x+" Y"+y+" Z"+z;//+" F"+speed;
						cmds[cmds.length]=cmd;
						lastpoint = point
					}
					cmds[cmds.length] = "G4 P2";
					cmds[cmds.length] = "M340 P"+actuatorIDs[0]+" S1000";

					
					return cmds;
				}
				
          ]]>
        </script>
      </actuation>

      <location>
        <x>120</x>
        <y>0</y>
        <z>0</z>
      </location>
    </bay>
  </tool>

  <system>
    <!--this should be the script of either XDFL or GCODE run at first conneciton-->
    <warmUp> 
		G21;G90;M17
	</warmUp>
    <!--this should be the script of either XDFL or GCODE run at disconneciton-->
    <coolDown>
		M84
    </coolDown>
  </system>

</Printer>
